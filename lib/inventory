#!/usr/bin/env python

INVENTORY = {}


def goodbye():
    print json.dumps(INVENTORY)
    sys.exit(0)


if '__main__' == __name__:
    import os
    import re
    import sys
    import glob
    import json
    import argparse
    import variables

    WILDCARD = '*/*'
    EXTENSION = '.private.key'
    MATRICES_FILE = '%s/.hosts.json' % variables.dirs['lib']

    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)

    group.add_argument('--list', action='store_true')
    group.add_argument('--host', action='store')

    arguments = parser.parse_args()

    if os.path.isfile(MATRICES_FILE):
        matrices = json.load(open(MATRICES_FILE))

        # The format must be the next: "matrix_name.droplet_name".
        if arguments.host and '.' in arguments.host:
            # Extract the name of a matrix from host specification.
            matrix_name, droplet_name = arguments.host.split('.')

            if matrix_name not in matrices:
                goodbye()

            WILDCARD = '%s/%s' % (matrix_name, droplet_name)

            # Limit matrix to a single item.
            matrices = {
                matrix_name: matrices[matrix_name],
            }

        for matrix_name, data in matrices.iteritems():
            for directory in [variables.dirs['cikit'], variables.dirs['self']]:
                MATRIX_CREDENTIALS_DIR = '%s/credentials/%s' % (directory, matrix_name)

                if os.path.isdir(MATRIX_CREDENTIALS_DIR):
                    for private_key_file in glob.glob('%s/%s%s' % (MATRIX_CREDENTIALS_DIR, WILDCARD, EXTENSION)):
                        droplet_name = os.path.basename(private_key_file).rstrip(EXTENSION)

                        INVENTORY['%s.%s' % (matrix_name, droplet_name)] = {
                            'hosts': ['%s.%s' % (droplet_name, data['hosts'][0])],
                            'vars': {
                                'ansible_user': 'root',
                                'ansible_port': '22%s' % re.sub('[^\d+]', '', droplet_name),
                                'ansible_ssh_private_key_file': private_key_file,
                            },
                        }

        # Append available matrices to the inventory.
        INVENTORY.update(matrices)

        if arguments.host:
            # A specific host has been requested. Limit the results, to
            # print only information about it.
            if arguments.host in INVENTORY:
                INVENTORY = {
                    arguments.host: INVENTORY[arguments.host],
                }
            # A specific host has been requested but wasn't found in a
            # list. Nothing to print.
            else:
                INVENTORY = {}

    goodbye()
