#jinja2: trim_blocks: True
#jinja2: lstrip_blocks: True
{{ ansible_managed | comment }}

{% for vhost in web_server_vhosts | reverse | list %}
    {# Re-save the value to the variable which might be used in included templates. #}
    {% if vhost.name %}
        {% set server_name = vhost.name + "." + project %}
        {% set subdomain = vhost.name + "\." %}
    {% else %}
        {% set server_name = project %}
        {% set subdomain = "" %}
    {% endif %}

    {% if localhost %}
        {% set directory = webroot + "/" + vhost.name %}

        {% set basic_definition %}
            server_name     {{ server_name }}.loc;
            root            {{ directory }};
        {% endset %}
    {% else %}
        {% set basic_definition %}
            server_name     "~^{{ subdomain }}(?<build_id>.+?)\.{{ ansible_host | regex_replace }}$";
            root            {{ webroot }}/$build_id/{{ vhost.name }};
        {% endset %}
    {% endif %}

    server {
        {{ basic_definition }}
        {#
            Nginx - is not default case but nevertheless, it's used on every droplet as
            a proxy for various services like Jenkins, Solr etc. and reserves the "80"
            and "443" ports for itself. To serve our application it also proxying requests
            to Apache which however cannot use mentioned above ports due to their busyness.
            To resolve this issue "ports.yml" configuration within every project has the
            conditions:
            - "web_port: "{{ 80 if localhost else 8080 }}"
            - "web_port_ssl: "{{ 443 if localhost else 44344 }}"
            That way Nginx, that operates on the standard ports, will redirect application's
            requests to the Apache, to "8080" and "44344" accordingly and all be good.

            The other scenario - Nginx as a web server for serving the application. We no
            longer interested in proxying to Apache and ready to use standard ports, but
            they were modified by the mentioned above conditions. Let's revert the changes
            using regular expressions.
        #}
        listen                          {{ web_port | regex_replace('^(\d{2})\d{2}$', '\\g<1>') }};

        include                         {{ nginx_conf_dir }}/snippets/site-locations.conf;
        {% include "parts/logs.j2" with context %}
    }

    server {
        {{ basic_definition }}
        listen                          {{ web_port_ssl | regex_replace('^(\d{3})\d{2}$', '\\g<1>') }} ssl;

        include                         {{ nginx_conf_dir }}/snippets/ssl.conf;
        include                         {{ nginx_conf_dir }}/snippets/site-locations.conf;
        {% include "parts/logs.j2" with context %}
    }
{% endfor %}
