# requires-project-root
# ro:limit
---
- hosts: all
  become: yes
  gather_facts: no

  environment:
    DEBIAN_FRONTEND: noninteractive

  vars_files:
    - "{{ __targetdir__ }}/.cikit/config.yml"

  vars_prompt:
    - name: web_server
      prompt: Which web server you want to use? (apache2/nginx)
      default: "apache2"
      private: no
      tags: ["php-stack", "security", "web-server"]

    - name: php_version
      prompt: Which version of PHP you'd want to install? (5.6/7.0/7.1/7.2)
      default: "7.1"
      private: no
      tags: ["php", "php-stack"]

    - name: nodejs_version
      prompt: Which version of Node.js you'd want to install? (4/5/6/7/8/9/10)
      default: "10"
      private: no
      tags: ["nodejs", "phantomjs"]

    - name: ruby_version
      prompt: Which version of Ruby you'd want to install? (2.1.10/2.2.6/2.3.3/2.4.0/2.5.0)
      default: "2.4.0"
      private: no
      tags: ["sniffers", "ruby"]

    - name: solr_version
      prompt: Which version of Solr you'd want to install? (5.5.5/6.6.5/7.7.0/no)
      default: "no"
      private: no
      tags: ["solr"]

    - name: mssql_install
      prompt: Do you want to install Microsoft SQL Server? (yes/no)
      default: "no"
      private: no
      tags: ["mssql"]

    - name: psql_install
      prompt: Do you want to install Postgres SQL Server? (yes/no)
      default: "no"
      private: no
      tags: ["psql"]

    - name: mongodb_install
      prompt: Do you want to install MongoDB NoSQL Server? (yes/no)
      default: "no"
      private: no
      tags: ["mongodb"]

  vars:
    basic_packages:
      apt:
        # Needs to be installed explicitly in case of very basic Ubuntu.
        - sudo
        - lsof
        - iputils-ping
        # Base packages.
        - git
        - tar
        - vim
        - curl
        - htop
        - make
        - time
        - tree
        - rsync
        - unzip
        - python
        - python-dev
        - python-pycurl
        - python-passlib
        - python-simplejson
        # To get the "easy_install".
        - python-setuptools
        - python-software-properties
        - libmagickcore-dev
        - libmagickwand-dev
        - libmysqlclient-dev
        - imagemagick
        - apparmor-utils
        - bsdutils
        - build-essential
        - software-properties-common
        - libffi-dev
        - libssl-dev
        - rng-tools
        - zlib1g-dev
        # Needed for "rbenv".
        - libreadline-dev
        # Allow installing the repositories via HTTPS.
        - apt-transport-https

      pip:
        - setuptools
        - paramiko
        - pyyaml
        - jinja2
        - markupsafe
        - MySQL-python
        - ansible

  pre_tasks:
    - name: Check whether preselected web server is available
      fail:
        msg: "The '{{ web_server }}' web server is unknown and cannot be used."
      when: "web_server not in cikit_webserver.servers"
      tags: ["php-stack", "security", "web-server"]

    - include_vars: "{{ item }}"
      with_fileglob: "{{ __targetdir__ }}/.cikit/vars/*.yml"
      tags: ["always"]

    - name: Check whether provision running for local environment
      set_fact:
        # Handle the "ad-hoc" inventory of Docker provisioning target.
        # Example: "ansible-playbook -i 'container-name,'". The value
        # of "ansible_host" will be "ansible_host" but "inventory_file"
        # remain "container-name,".
        localhost: "{{ ansible_host in ['127.0.0.1', 'localhost'] or ansible_host + ',' == inventory_file }}"
      tags: ["always"]

    - include_tasks: tasks/password.yml
      vars:
        title: "Compute password for basic HTTP authentication"
        name: http_auth_pass
        var: "{{ http_auth_pass }}"
      when: not localhost
      tags: ["always"]

    - name: Ensure Python is installed on remote host
      # We must use "raw" instead of "shell" here due to the following:
      # FAILED! => {"changed": false, "failed": true, "module_stderr": "Shared connection to <HOST>", "module_stdout": "/bin/sh: 1: /usr/bin/python: not found", "msg": "MODULE FAILURE", "rc": 0}
      raw: "[ $(which python) ] || (apt update -y && apt install python-minimal -y)"
      when: not localhost
      tags: ["always"]

      # "gather_facts" after performing required tasks.
      # See https://gist.github.com/gwillem/4ba393dceb55e5ae276a87300f6b8e6f#gistcomment-1869582
    - name: Gather facts
      setup: ~
      tags: ["always"]

    - name: "Obtain home directory of '{{ ansible_user }}' user"
      shell: "eval echo ~{{ ansible_user }}"
      register: user_home
      tags: ["always"]

    - name: Set up variables
      set_fact:
        docker: "{{ 'docker' == ansible_virtualization_type }}"
        user_home: "{{ user_home.stdout }}"
        operation_place: "{{ 'local' if localhost else 'remote' }}"
        # @todo Remove this temporary workaround once the issue will be solved.
        # https://github.com/ansible/ansible/issues/37563#issuecomment-373941586
        ansible_user: "{{ ansible_user }}"
      tags: ["always"]

    - include_tasks: tasks/project-variable.yml
      when: not localhost
      tags: ["ci"]

    - name: Configure hostname
      hostname:
        name: "{{ inventory_hostname }}"
      # It's not possible to set the hostname for Docker container. The "-h"
      # option ought to be used instead.
      # https://github.com/moby/moby/issues/9295#issuecomment-140350434
      when: not localhost and not docker
      tags: ["always"]

    - name: Create CIKit command line utility
      file:
        # This directory is explicitly mounted in the Vagrantfile.
        src: "{{ __selfdir__ }}/lib/{{ item.src }}"
        dest: "{{ item.dest }}/{{ item.src }}"
        state: link
      with_items:
        - src: cikit
          dest: /usr/bin
        - src: cikit.complete.sh
          dest: /etc/bash_completion.d
      when: localhost

    - name: Process facts
      set_fact: {"{{ item.key }}": "{{ item.value not in ['no', false] }}"}
      with_dict:
        install_solr: "{{ solr_version }}"
        install_mssql: "{{ mssql_install }}"
        install_psql: "{{ psql_install }}"
        install_mongodb: "{{ mongodb_install }}"
      tags: ["always"]

    - name: Spoof Sendmail if not installed
      file:
        src: /bin/true
        path: /usr/sbin/sendmail
        state: link
        force: no
      ignore_errors: yes

    # https://github.com/propeoplemd/cibox/pull/349
    - name: Recover possible fail
      shell: yes | dpkg --configure -a
      ignore_errors: yes

    - name: Update APT cache
      apt:
        update_cache: yes
        # Update cache if it's older than 31 days.
        cache_valid_time: 2678400

    - name: Install APT packages
      apt:
        name: "{{ basic_packages.apt }}"
        state: present
      register: cikit_apt_needs_cache_update

    - name: Update APT cache
      apt:
        update_cache: yes
      # Update cache only if new packages were installed.
      when: cikit_apt_needs_cache_update.changed

    - include_tasks: tasks/pip-install.yml
      vars:
        pip_packages: "{{ basic_packages.pip }}"

    # We have to install CIKit after getting all mandatory APT packages
    # because the installer may use some of them (e.g. "curl").
    - include_tasks: tasks/cikit-install.yml
      when: not localhost

  roles:
    - role: cikit-security
      tags: ["security"]

    - role: cikit-dns
      when: not localhost
      tags: ["dns"]

    - role: cikit-webserver
      tags: ["php", "php-stack", "security", "web-server"]

    # Should be before installing/configuring PHP since it may
    # install the "sqlsrv" extension which is based on "mssql".
    - role: cikit-mssql
      when: install_mssql
      tags: ["mssql"]

    # Should be before installing/configuring PHP since it modifies
    # the list of PHP packages to install.
    - role: cikit-psql
      when: install_psql
      tags: ["psql"]

    - role: cikit-php
      # The "web-server" tag is needed in order to be sure necessary tweaks
      # were done for a specific web server (PHP-FPM added to boot in case
      # of Nginx, "libapache2-mod-php" installed for Apache2, etc.).
      tags: ["php", "php-stack", "web-server"]

    - role: cikit-nodejs
      tags: ["nodejs"]

    - role: ansible-role-mongodb
      when: install_mongodb
      tags: ["mongodb"]

    - role: cikit-phantomjs
      tags: ["phantomjs"]

    - role: cikit-composer
      tags: ["composer", "php-stack"]

    - role: cikit-mysql
      tags: ["mysql", "php-stack"]

    - role: cikit-java
      tags: ["java", "solr", "sniffers", "jenkins"]

    - role: cikit-solr
      when: install_solr
      tags: ["solr", "php-stack"]

    - role: cikit-ruby
      tags: ["sniffers", "ruby"]

    - role: cikit-sniffers
      tags: ["sniffers", "php-stack"]

    - role: ansible-role-memcached
      tags: ["memcache", "php-stack"]

    - role: cikit-selenium
      tags: ["selenium"]

    - role: cikit-ci
      when: not localhost
      tags: ["ci"]

    - role: cikit-project
      tags: ["project"]

    - role: cikit-env
      tags: ["env"]

  tasks:
    - name: Starting random rnd-tools service
      shell: rngd -r /dev/urandom
      when: not localhost and 'openvz' != ansible_virtualization_type
      tags: ["always"]
