---
- hosts: localhost
  connection: local

  vars:
    # As name of folder inside of "cmf/".
    cmf: "drupal"
    without_sources: no
    # Every "download_url" will be prefixed with "https://" and ended by "-{{ version }}.tar.gz".
    cmfs:
      drupal:
        download_url: "www.drupal.org/files/projects/drupal"
        default_version: "7.54"
      wordpress:
        download_url: "wordpress.org/wordpress"
        default_version: "4.7.5"

  vars_files:
    - ../config.yml

  tasks:
    - include: tasks/project-variable.yml

    - fail:
        msg: "Project name should only contain letters, numbers, hyphens or dots. It cannot start with a hyphen or dot."
      # Project name will be used as VM hostname, so use the same regex for validating it as Vagrant.
      # https://github.com/mitchellh/vagrant/blob/6d3ab39b27d7cc4036c01b17d703bdd5dbe1b8ee/plugins/kernel_v2/config/vm.rb#L595
      when: "{{ not project | replace('_', '-') | match('^[a-z0-9][-.a-z0-9]*$', 'i') }}"

    - name: Set default version of CMF
      set_fact:
        version: "{{ cmfs[cmf].default_version }}"
      when: version is undefined

    - name: Determine major version of CMF
      set_fact:
        major: "{{ version.split('.') | first }}"

    - name: Check for CMF configuration
      stat:
        path: "../cmf/{{ cmf }}/{{ major | int }}"
      register: cmf_configs

    - name: CMF is not available
      fail:
        msg: "You are not allowed to install {{ cmf | capitalize }} {{ version }} because it isn't pre-configured."
      when: not cmf_configs.stat.exists

    - name: Prepare directory for project
      file:
        path: "../{{ project }}/docroot"
        state: directory

    - name: Download CMF
      shell: "curl -s https://{{ cmfs[cmf].download_url }}-{{ version }}.tar.gz | tar --strip-components=1 -xzC ./"
      args:
        warn: no
        chdir: "../{{ project }}/docroot"
      when: not without_sources

    - name: Prepare CIKit-structured repository
      synchronize:
        src: "{{ item.src }}"
        dest: "../{{ project }}/{{ item.dest | default('') }}"
        archive: no
        recursive: yes
        rsync_opts:
          - "--exclude=*.retry"
          - "--exclude=.git"
      with_items:
        - src: "../cmf/all/"
        - src: "../cmf/{{ cmf }}/all/"
        - src: "{{ cmf_configs.stat.path }}/"
        - src: "../cikit"
        - src: "../config.yml"
        - src: "../inventory"

        - src: "../scripts/"
          dest: ".cikit/"

    - name: Setting permissions for project tree
      shell: "find ../{{ project }} -type {{ item.key }} -print0 | xargs -0 chmod {{ item.value }}"
      with_dict:
        d: 755
        f: 664

    - name: Setting executable permissions for Bash scripts
      file:
        path: "../{{ project }}/{{ item }}"
        mode: a+x
      with_items:
        - cikit
        - selenium.sh

    - name: Update config.yml
      lineinfile:
        dest: "../{{ project }}/config.yml"
        line: "cmf: {{ cmf }}\ncore: {{ major }}\nproject: {{ project }}\nsite_url: https://{{ project | replace('_', '-') }}.dev"
        insertafter: "^---$"

    - name: Update config.yml
      replace:
        dest: "../{{ project }}/config.yml"
        regexp: "APPLICATION_CONFIG: ~"
        replace: "{{ lookup('file', '../' + project + '/APPLICATION_CONFIG.yml') }}"

    - include_vars: "../{{ project }}/REPLACEMENTS.yml"

    - name: Seeking the placeholders
      shell: "find ../{{ project }}/scripts/ -type f -exec sed -i {{ \"''\" if ansible_os_family == 'Darwin' else '' }} 's/<{{ item.key }}>/{{ item.value | regex_escape }}/g' {} \\;"
      environment:
        LC_ALL: C
      with_dict: "{{ replacements }}"

    - name: Clear created repository
      file:
        path: "../{{ project }}/{{ item }}"
        state: absent
      with_items:
        - .cikit/repository.yml
        - docroot/.gitignore
        - docroot/.git
        - APPLICATION_CONFIG.yml
        - REPLACEMENTS.yml
