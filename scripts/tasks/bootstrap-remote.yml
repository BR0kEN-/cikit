---
- name: Ensure directory for SSH key pair exists
  file:
    path: ./files/ssh-keys
    state: directory
  become: no
  delegate_to: localhost

- name: Generate project SSH key pair
  shell: >
    ssh-keygen -t rsa -b 2048 -C "cikit@{{ project }}" -N '' -q -f private.key && mv $_.pub ${_//private/public}
  args:
    chdir: ./files/ssh-keys
    creates: private.key
    executable: /bin/bash
  become: no
  delegate_to: localhost

- name: Copy SSH key pair to server
  copy:
    src: "./files/ssh-keys/{{ item }}.key"
    dest: "{{ user_home.stdout }}/.ssh/"
    group: "{{ ansible_user }}"
    owner: "{{ ansible_user }}"
  with_items: ["private", "public"]

- name: Remove insecure key from list of authorized
  lineinfile:
    dest: "{{ user_home.stdout }}/.ssh/authorized_keys"
    state: absent
    regexp: vagrant insecure public key

- name: Read secure key
  shell: cat ./files/ssh-keys/public.key
  become: no
  register: cikit_public_key
  delegate_to: localhost

- name: Add secure key to authorized list
  lineinfile:
    dest: "{{ user_home.stdout }}/.ssh/authorized_keys"
    line: "{{ cikit_public_key.stdout }}"
    state: present
    create: yes

- name: Ensure correctness of permissions and ownership for SSH configuration
  file:
    mode: "go-rw"
    path: "{{ user_home.stdout }}/.ssh/"
    group: "{{ ansible_user }}"
    owner: "{{ ansible_user }}"

- name: 'Ensure "vagrant" user does not exists'
  user:
    name: vagrant
    state: absent
    remove: yes

# Password for "root" user is "vagrant" by default! Since our server is public
# we cannot leave this security hole!
- name: 'Disable ability to login as "root" via password'
  lineinfile:
    dest: /etc/ssh/sshd_config
    line: "PermitRootLogin prohibit-password"
    state: present
    regexp: "^(?:#+)?PermitRootLogin.*$"
  register: sshd_config_state

- name: Restart SSH daemon after modifying the configuration
  service:
    name: ssh
    state: restarted
  when: sshd_config_state.changed
