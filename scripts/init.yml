# ro:project
---
- hosts: localhost
  connection: local
  gather_facts: no

  vars:
    box: http://propeople.com.ua/pub/CIKit_Ubuntu_16.04_LTS_package.box
    # The name of a folder inside of the "cmf/".
    cmf: drupal
    cmfs: {}
    without_sources: no

  tasks:
    - import_tasks: tasks/project-variable.yml

    - name: Load available systems
      set_fact:
        cmfs: "{{ cmfs | combine({item | dirname | basename: lookup('file', playbook_dir | dirname + '/' + item) | from_yaml}) }}"
      with_items: "{{ 'cmf/*/main.yml' | fileglob }}"

    - name: Set default version of CMF
      set_fact:
        version: "{{ cmfs[cmf].default_version }}"
      when: version is undefined

    - name: Determine major version of CMF
      set_fact:
        major: "{{ version.split('.') | first }}"
        project_directory: "{{ __targetdir__ }}/{{ project }}"

    - name: Check for CMF configuration
      stat:
        path: "../cmf/{{ cmf }}/{{ major | int }}"
      register: cmf_configs

    - fail:
        msg: "You are not allowed to install {{ cmf | capitalize }} {{ version }} because it isn't pre-configured."
      when: not cmf_configs.stat.exists

    - name: Prepare directory for project
      file:
        path: "{{ project_directory }}/docroot"
        state: directory
      register: project_docroot

    # @todo Still not possible to use the "unarchive" module with "extra_opts". It will fail with "Command could not handle archive."
    - name: Download CMF
      shell: "curl -s {{ cmfs[cmf].download_url | replace('VERSION', version) }} | tar --strip-components=1 -xzC ./"
      args:
        warn: no
        chdir: "{{ project_docroot.path }}"
      when: not without_sources

    - name: Prepare CIKit-structured repository
      synchronize:
        src: "{{ item }}"
        dest: "{{ project_directory }}"
        archive: no
        recursive: yes
        rsync_opts:
          - "--exclude=*.retry"
          - "--exclude=.git"
      with_items:
        - "../cmf/all/"
        - "../cmf/{{ cmf }}/all/"
        - "{{ cmf_configs.stat.path }}/"

    - name: Setting permissions for project tree
      shell: "find {{ project_directory }}/ -type {{ item.key }} -print0 | xargs -0 chmod {{ item.value }}"
      with_dict:
        d: 755
        f: 664

    - name: Update config.yml
      lineinfile:
        dest: "{{ project_directory }}/.cikit/config.yml"
        line: "cmf: {{ cmf }}\ncore: {{ major }}\nproject: {{ project }}\nsite_url: https://{{ project | replace('_', '-') }}.loc"
        insertafter: "^---$"

    - name: Update config.yml
      replace:
        dest: "{{ project_directory }}/.cikit/config.yml"
        regexp: "APPLICATION_CONFIG: ~"
        replace: "{{ lookup('file', project_directory + '/APPLICATION_CONFIG.yml') }}"

    - include_vars: "{{ project_directory }}/REPLACEMENTS.yml"

    - name: Determine OS family
      shell: uname
      register: uname

    - name: Seeking for the placeholders
      shell: >
        find {{ project_directory }}/scripts/ -type f -exec sed -i {{ "''" if uname.stdout == 'Darwin' else '' }} 's/<{{ item.key }}>/{{ item.value | regex_escape }}/g' {} \;
      environment:
        LC_ALL: C
      with_dict: "{{ replacements }}"

    - name: Clear created repository
      file:
        path: "{{ project_directory }}/{{ item }}"
        state: absent
      with_items:
        - docroot/.gitignore
        - docroot/.git
        - APPLICATION_CONFIG.yml
        - REPLACEMENTS.yml

    - name: Initialize Vagrant box
      shell: "vagrant init -m {{ box | basename }} {{ box }}"
      args:
        chdir: "{{ project_directory }}"
        creates: Vagrantfile
