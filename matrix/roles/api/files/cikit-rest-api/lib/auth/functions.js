const speakeasy = require('speakeasy');
const crypto = require('crypto');

/**
 * Destroy old and generate new "access" and "refresh" tokens.
 *
 * @param {Object} app
 *   The application.
 * @param {String} userId
 *   The ID of a user.
 *
 * @return {{token_type: {String}, expires_in: {Number}, access_token: {String}, refresh_token: {String}}}
 *   The Bearer's token object.
 */
async function generateTokens(app, userId) {
  const [AccessToken, RefreshToken] = await Promise.all(['AccessToken', 'RefreshToken'].map(async name => {
    await app.mongoose.models[name].remove({userId});

    return await new app.mongoose.models[name]({userId, token: crypto.randomBytes(32).toString('hex')}).save();
  }));

  return {
    token_type: 'Bearer',
    expires_in: app.config.get('security:tokenLife'),
    access_token: AccessToken.toString(),
    refresh_token: RefreshToken.toString(),
  };
}

/**
 * @param {Object} totp
 *   The TOTP definition.
 * @param {String} totp.type
 *   The type of TOTP.
 * @param {Number} totp.length
 *   The length of TOTP secret.
 * @param {String} totp.issuer
 *   The issuer of TOTP secret.
 *
 * @return {String}
 *   The TOTP secret key based on the config.
 *
 * @link https://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm
 */
function generateTotpSecret(totp) {
  return speakeasy.generateSecret({length: totp.length, otpauth_url: false})[totp.type];
}

/**
 * @param {Object} totp
 *   The TOTP definition.
 * @param {String} totp.type
 *   The type of TOTP.
 * @param {Number} totp.length
 *   The length of TOTP secret.
 * @param {String} totp.issuer
 *   The issuer of TOTP secret.
 * @param {String} secret
 *   The secret key, generated for the authenticating app.
 * @param {String} code
 *   The code, generated by authenticating app, that needs to be verified.
 *
 * @return {Boolean}
 *   A state whether TOTP code is valid.
 */
function isTotpCodeValid(totp, secret, code) {
  return speakeasy.totp.verify({secret, token: code, encoding: totp.type});
}

module.exports = {
  generateTokens,
  generateTotpSecret,
  isTotpCodeValid,
};
