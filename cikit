#!/usr/bin/env bash

# Dependencies:
# - bash
# - cd
# - dirname
# - pwd
# - readlink
# - ls
# - time
# - eval
# - ansible-playbook

# JSON formatted "--extra-vars" options.
extra_vars=""
# List of parameters for "ansible-playbook" command.
params=""

locate_path()
{
  local SELF_PATH

  SELF_PATH=$(cd -P -- "$(dirname -- "$1")" && pwd -P)

  while [ -L "$SELF_PATH" ]; do
    # 1) Go to the directory with a symlink.
    # 2) Go to the directory to which the symlink points.
    # 3) Get the path.
    SELF_PATH=$(cd "$(dirname -- "$SELF_PATH")" && cd "$(dirname -- "$(readlink "$SELF_PATH")")" && pwd)
  done

  echo "$SELF_PATH"
}

exit_with_help()
{
  if ! cd -- "$1" > /dev/null 2>&1; then
    echo "Directory \"$1\" does not exists. Playbooks cannot be located."
    exit 13
  fi

  if ls ./*.yml > /dev/null 2>&1; then
    local OPERATIONS

    for operation in *.yml; do
      OPERATIONS+="${operation%.*} "
    done

    echo "$OPERATIONS"
  else
    echo "No available operations in $(pwd)."
  fi

  exit
}

extra_var()
{
  # Remove all data after "=" symbol.
  local var=${1%=*}
  local val=${1#*=}

  # Remove leading "--".
  var=${var#--}
  val=${val#--}

  # List of allowed variables for passing as parameters for "ansible-playbook".
  for var_ansible in limit tags list-tags; do
    if [ "$var" == "$var_ansible" ]; then
      params+=" --$var"

      if [ "$var" != "$val" ]; then
        params+="=$val"
      fi
    fi
  done

  if [ "$var" == "$val" ]; then
    val="true"
  fi

  # Replace all "-" by "_" in argument name.
  var=${var//-/_}

  # Allow to pass JSON as is.
  if [[ "$val" != "{*" && "${val: -1}" != "}" ]]; then
    val="\"$val\""
  fi

  extra_vars+="\"$var\":$val,"
}

SELF_PATH="$(locate_path "$0")"

if [ -z "$1" ]; then
  exit_with_help "$SELF_PATH/scripts"
fi

PLAYBOOK="${1/%.yml/}.yml"

for playbook in "$SELF_PATH/scripts/$PLAYBOOK" "$SELF_PATH/$PLAYBOOK" "$PLAYBOOK"; do
  if [ -f "$playbook" ]; then
    break
  fi
done

if [ ! -f "$playbook" ]; then
  if [ -d "$1" ]; then
    exit_with_help "$1"
  fi

  echo "Playbook \"$playbook\" does not exists!"
  exit 1
fi

# The "EXTRA_VARS" passed as environment variable. Parse it first
# to not allow overwrite explicitly passed options.
if [ -n "$EXTRA_VARS" ]; then
  for var in $(IFS="--" echo "$EXTRA_VARS"); do
    extra_var "$var"
  done
fi

# Parse command options.
for ((i = 2; i <= $#; i++)); do
  extra_var "${!i}"
done

# Remove last comma.
extra_vars=${extra_vars%%,}

if [ -z "$ANSIBLE_INVENTORY" ]; then
  # Move "inventory" into user's home directory because it is not mounted file
  # system and can be affected via Linux commands (chmod, chown) under Windows.
  cp "$SELF_PATH/inventory" ~/.inventory
  chmod a-x ~/.inventory
  params+=" -i ~/.inventory"
# The "uname -o" cannot be used due to "-o" option is not supported on OS X.
elif [[ "$(uname -s)" =~ "CYGWIN" ]]; then
  ANSIBLE_INVENTORY=$(cygpath "$ANSIBLE_INVENTORY")
fi

# Pass any extra arguments for "ansible-playbook". Most useful
# case: "ANSIBLE_ARGS=-vvvv cikit reinstall"
if [ -n "$ANSIBLE_ARGS" ]; then
  params+=" $ANSIBLE_ARGS"
fi

if [ -n "$extra_vars" ]; then
  params+=" --extra-vars='{$extra_vars}'"
fi

export PYTHONUNBUFFERED=1
export ANSIBLE_FORCE_COLOR=1

# Go to the directory with playbook to set a relative path for tasks.
# https://groups.google.com/forum/#!topic/ansible-project/QqaBvKVKDDQ
cd "${playbook%/*}"

COMMAND="ansible-playbook $playbook $params"

# Print entire command if verbosity requested.
if [[ "$params" =~ "-v" ]]; then
  echo "$COMMAND"
fi

time eval "${COMMAND}"
