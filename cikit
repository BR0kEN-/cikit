#!/usr/bin/env bash

# Dependencies:
# - bash
# - cd
# - dirname
# - pwd
# - readlink
# - ls
# - time
# - eval
# - ansible-playbook

COMMAND="ansible-playbook"
# JSON formatted "--extra-vars" options.
extra_vars=""
# List of parameters for "ansible-playbook" command.
params=""

locate_path()
{
  local SELF_PATH="$1"

  if [ -L "$SELF_PATH" ]; then
    while [ -L "$SELF_PATH" ]; do
      SELF_PATH="$(cd "$(dirname -- "$(readlink -- "$SELF_PATH")")" && pwd)"
    done
  else
    SELF_PATH="$(cd -P -- "$(dirname -- "$SELF_PATH")" && pwd -P)"
  fi

  echo "$SELF_PATH"
}

exit_with_help()
{
  if ! cd -- "$1" > /dev/null 2>&1; then
    echo "Directory \"$1\" does not exists. Playbooks cannot be located."
    exit 13
  fi

  if ls ./*.yml > /dev/null 2>&1; then
    local OPERATIONS

    for operation in *.yml; do
      OPERATIONS+="${operation%.*} "
    done

    echo "$OPERATIONS"
  else
    echo "No available operations in $(pwd)."
  fi

  exit
}

extra_var()
{
  # Remove all data after "=" symbol.
  local var=${1%=*}
  local val=${1#*=}

  # Remove leading "--".
  var=${var#--}
  val=${val#--}

  # List of allowed variables for passing as parameters for "ansible-playbook".
  for var_ansible in limit tags list-tags; do
    if [ "$var" == "$var_ansible" ]; then
      params+=" --$var"

      if [ "$var" != "$val" ]; then
        params+="=$val"
      fi
    fi
  done

  if [[ "$var" == "$val" || "" == "$val" ]]; then
    val="true"
  fi

  # Replace all "-" by "_" in argument name.
  var=${var//-/_}

  # Allow to pass JSON and arrays as is.
  if [[ ${val::1} != "{" && ${val::-1} != "}" ]] && [[ ${val::1} != "[" && ${val::-1} != "]" ]]; then
    val="\"$val\""
  fi

  extra_vars+="\"$var\":$val,"
}

SELF_PATH="$(locate_path "$0")"
ENV_CONFIG="${SELF_PATH}/.env-config.yml"

if [ -z "$1" ]; then
  exit_with_help "$SELF_PATH/scripts"
fi

PLAYBOOK="${1/%.yml/}.yml"

for playbook in "$SELF_PATH/scripts/$PLAYBOOK" "$SELF_PATH/$PLAYBOOK" "$PLAYBOOK"; do
  if [ -f "$playbook" ]; then
    break
  fi
done

if [ ! -f "$playbook" ]; then
  if [ -d "$1" ]; then
    exit_with_help "$1"
  fi

  echo "Playbook \"$playbook\" does not exists!"
  exit 1
fi

if [ -f "${ENV_CONFIG}" ]; then
  # It's interesting trick with detecting Python interpreter. Sometimes it may differ. Especially
  # on MacOS, when Ansible installed via Homebrew. For instance, "which python" returns
  # the "/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/bin/python2.7",
  # but this particular setup may not have necessary packages for full Ansible operability. Since
  # Ansible - is a Python scripts they must have a shadebag line with path to interpreter they
  # should run by. Grab it and try!
  # Given:
  #   $(realpath $(which python)) -c 'import yaml'
  # Ends by:
  #   Traceback (most recent call last):
  #     File "<string>", line 1, in <module>
  #   ImportError: No module named yaml
  # But:
  #   $(cat $(which "ansible-playbook") | head -n1 | tr -d '#!') -c 'import yaml'
  # Just works.
  PYTHON_INTERPRETER=$(cat $(which "${COMMAND}") | head -n1 | tr -d '#!')

  if [ -x "${PYTHON_INTERPRETER}" ]; then
    for var in $("${PYTHON_INTERPRETER}" -c "exec(\"import yaml\nfor k, v in yaml.load(open('${ENV_CONFIG}')).iteritems():\n\tprint '--%s=%s' % (k, v)\")"); do
      extra_var "${var}"
    done
  else
    echo -e "\e[0;33mWARNING: Cannot read environment configuration from \"${ENV_CONFIG}\". Looks like Python setup cannot provide Ansible operability.\e[0m"
  fi
fi

# The "EXTRA_VARS" passed as environment variable. Parse it first
# to not allow overwrite explicitly passed options.
if [ -n "$EXTRA_VARS" ]; then
  for var in $(IFS="--" echo "$EXTRA_VARS"); do
    extra_var "$var"
  done
fi

# Parse command options.
for ((i = 2; i <= $#; i++)); do
  extra_var "${!i}"
done

# Remove last comma.
extra_vars=${extra_vars%%,}

if [ -z "$ANSIBLE_INVENTORY" ]; then
  # Move "inventory" into user's home directory because it is not mounted file
  # system and can be affected via Linux commands (chmod, chown) under Windows.
  cp "$SELF_PATH/inventory" ~/.inventory
  chmod a-x ~/.inventory
  params+=" -i ~/.inventory"
# The "uname -o" cannot be used due to "-o" option is not supported on OS X.
elif [[ "$(uname -s)" =~ "CYGWIN" ]]; then
  ANSIBLE_INVENTORY=$(cygpath "$ANSIBLE_INVENTORY")
fi

# Pass any extra arguments for "ansible-playbook". Most useful
# case: "ANSIBLE_ARGS=-vvvv cikit reinstall"
if [ -n "$ANSIBLE_ARGS" ]; then
  params+=" $ANSIBLE_ARGS"
fi

if [ -n "$extra_vars" ]; then
  params+=" --extra-vars='{$extra_vars}'"
fi

export PYTHONUNBUFFERED=1
export ANSIBLE_FORCE_COLOR=1

# Go to the directory with playbook to set a relative path for tasks.
# https://groups.google.com/forum/#!topic/ansible-project/QqaBvKVKDDQ
cd "${playbook%/*}"

COMMAND+=" $playbook $params"

# Print entire command if verbosity requested.
if [[ "$params" =~ -v{1,}[[:space:]] ]]; then
  echo "$COMMAND"
fi

time eval "${COMMAND}"
